#! @PERL@
#

# January, 2006: Initial implementation. - Claude Lepage
#
# Copyright Alan C. Evans
# Professor of Neurology
# McGill University
#

use strict;
use warnings "all";
use FindBin;

use Getopt::Tabular;
use MNI::Startup;
# use MNI::PathUtilities qw(split_path);
use MNI::FileUtilities qw(check_output_dirs);
use MNI::DataDir;

# --- set the help & usage strings ---
my $help = <<HELP;
Compute the cortical thickness from the white and gray surfaces.
HELP

my $license = <<LICENSE;
Copyright Alan C. Evans
Professor of Neurology
McGill University

LICENSE

my $usage = <<USAGE;
Usage: $ProgramName [options] white.obj gray.obj output.txt
       $ProgramName -help to list options

$license
USAGE

Getopt::Tabular::SetHelp( $help, $usage );

my $fwhm = 0;
my $method = "tlink";
my $transform_xfm = undef;

my @options =
  ( @DefaultArgs,     # from MNI::Startup
    ['-fwhm', 'string', 1, \$fwhm, 'blurring kernel in mm'],
    ['-tlink', 'const', "tlink", \$method, 'use t-link method for thickness'],
    ['-tnear', 'const', "tnear", \$method, 'use t-near method for thickness'],
    ['-tfs', 'const', "tfs", \$method, 'use symmetric t-near method for thickness (like FreeSurfer)'],
    ['-tnormal', 'const', "tnormal", \$method, 'use t-normal method for thickness (do not use)'],
    ['-tlaplace', 'const', "tlaplace", \$method, 'use t-Laplace method for thickness'],
    ['-transform', 'string', 1, \$transform_xfm, 
     'transformation from native to stereotaxic (if surfaces in stx space)'],
  );

GetOptions( \@options, \@ARGV )
  or exit 1;
die "$usage\n" unless @ARGV == 3;

my $white = shift;
my $gray = shift;
my $output = shift;

# These are temporary files.
MNI::FileUtilities::check_output_dirs("${TmpDir}")
  or exit 1;

if( defined $transform_xfm ) {
  my $white_trans = "${TmpDir}/white_trans.obj";
  my $gray_trans = "${TmpDir}/gray_trans.obj";
  my $inv_trans = "${TmpDir}/inv_trans.xfm";
  &run( "xfminvert", $transform_xfm, $inv_trans );
  &run( "transform_objects", $white, $inv_trans, $white_trans );
  &run( "transform_objects", $gray, $inv_trans, $gray_trans );
  $white = $white_trans;
  $gray = $gray_trans;
}

my $midSurface = "${TmpDir}/midSurface.obj";
&run( "average_surfaces", $midSurface, "none", "none", 1, $white, $gray );

if( $method eq "tlink" ) {
  # also: &run( "diff_surfaces", $white, $gray, "link", $output );
  &run( "dump_rms", $white, $gray, $output );
}

if( $method eq "tnear" ) {
  &run( "diff_surfaces", $white, $gray, "near", $output );
}

if( $method eq "tfs" ) {
  my $output1 = "${TmpDir}/tfs_white_to_gray.txt";
  my $output2 = "${TmpDir}/tfs_gray_to_white.txt";
  &run( "diff_surfaces", $white, $gray, "near", $output1 );
  &run( "diff_surfaces", $gray, $white, "near", $output2 );
  &run( "vertstats_math", '-old_style_file', '-add', $output1,
        $output2, $output );
  &run( "vertstats_math", '-old_style_file', '-mult', '-const', 0.5,
        $output, $output );
}

if( $method eq "tnormal" ) {
  &run( "diff_surfaces", $white, $gray, "normal", $output );
}

if( $method eq "tlaplace" ) {
  if( defined $transform_xfm ) {
    # when transformation is given, transform both surfaces (done above) and
    # icbm model to native space (ugly!)
    my $icbmModel = "0.50";
    my $ModelDir = "$FindBin::Bin/../share/ICBM/";
    my @files = ("icbm_template_${icbmModel}mm.mnc");
    MNI::DataDir::check_data($ModelDir, \@files);
    &run( "mincresample", "-quiet", "$ModelDir/icbm_template_${icbmModel}mm.mnc", 
          "-transform", $transform_xfm, "-invert", "-tfm_input_sampling",
          "-step", "0.5", "0.5", "0.5", "-clobber", "${TmpDir}/laplace_like_file.mnc" );
    &run( "laplacian_initialisation", "-like", "${TmpDir}/laplace_like_file.mnc",
          $gray, $white, "${TmpDir}/laplace_initial.mnc" );
    unlink( "${TmpDir}/laplace_like_file.mnc" );
  } else {
    # assume transformation is identity, so surfaces are already in icbm space
    &run( "laplacian_initialisation", "-icbm_model", "0.50", $gray, $white,
          "${TmpDir}/laplace_initial.mnc" );
  }
  &run( "laplacian_thickness", "-h", "0.1", "-convergence", "0.00001", "-2nd_rk",
        "-max_iterations", "300", "-object_eval", $midSurface, "-from_grid",
        "${TmpDir}/laplace_initial.mnc", $gray, $white,
        "${TmpDir}/thickness_uncleaned.txt" );
  &run( "vertex_stats", "-replace_nans", "${TmpDir}/thickness_uncleaned.txt",
        $output );
}

# Blur the cortical thickness on the mid-surface in new space.

if( $fwhm gt 0 ) {
  my $output_blurred = "${TmpDir}/thickness_blurred.mnc";
  &run( "depth_potential", "-smooth", $fwhm, $output, 
        $midSurface, $output_blurred );
  &run( "mv", "-f", $output_blurred, $output );
}


#Execute a system call.

sub run {
  print "@_\n";
  system(@_)==0 or die "Command @_ failed with status: $?";
}

