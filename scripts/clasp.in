#! @PERL@
#
# Based on ~david/Surface_deformation/How_to_extract_cortical_surfaces.txt

use strict;
use warnings "all";

use Getopt::Tabular;
use MNI::Startup;
use MNI::FileUtilities;
use MNI::Spawn;

# Several of the sub-programs will look for static files using
# MNI::DataDir.  Set the directory here if the user does not have
# their own.
#
$ENV{MNI_DATAPATH} = 'xDATADIRx'
  unless defined $ENV{MNI_DATAPATH};


MNI::Spawn::RegisterPrograms
  ( [qw/  rm
     mv
     minccalc
     mincresample
     mincdefrag
     make_phantom
     dilate_volume
     cortical_surface
     discretize_pve
     pve_script
     pve_curvature
     skel
     mask_cortical_white_matter
     surface_mask2 mask_volume
     extract_white_surface
     classify_correct
     calibrate_white
     make_asp_grid
     expand_from_white/ ] )
  or exit 1;


# --- set the help & usage strings ---
my $help = <<HELP;
The help string goes here.

HELP

my $usage = <<USAGE;
usage: $ProgramName [options] classified.mnc final.mnc
       $ProgramName -help to list options
USAGE

Getopt::Tabular::SetHelp( $help, $usage );

# --- process options ---
my( $masking_surface, $masked_input, $output_prefix );
my( $laplace, $cls_correct, $skelCSF, $white );
my( $Mask, $Mask_dilated, $objMask, $vol_mask_flag );
my( $hemi_left, $hemi_right, $hemi_rect_mask, $hemi_cls, $hemi_num );
my( $cls_correct_bak, $output_prefix_bak, $hemi_num_total );
my( $remove_flag );

# --- initialization ---
$hemi_right=0;
$hemi_left=0;
$remove_flag=0;

my @options = 
  ( @DefaultArgs,     # from MNI::Startup
    ['-out', 'string', 1, \$output_prefix,
     'prefix for all output files'],
    ['-mask', 'string', 1, \$Mask,
     'brain mask file (obj or mnc) (give -vol_mask when you use minc file)'],
    ['-vol_mask|-obj_mask', 'boolean', 1, \$vol_mask_flag,
     'use volume mask instead of object mask [default: -obj_mask]'],
    ['-left', 'boolean', 0, \$hemi_left,
     'generate surfaces of left hemisphere (if both of -left and -right are not given, clasp2 generates one surface including left and right hemispheres)'],
    ['-right', 'boolean', 0, \$hemi_right,
     'generate surfaces of right hemisphere (if both of -left and -right are not given, clasp2 generates one surface including left and right hemispheres)'],
    ['-remove_models', 'boolean', 0, \$remove_flag,
     'remove model surfaces'],
  );

GetOptions( \@options, \@ARGV ) 
  or exit 1;
die "$usage\n" unless @ARGV == 2;

# Pass along $Clobber in case of a restart
AddDefaultArgs('discretize_pve',['-clobber']) if ($Clobber);
AddDefaultArgs('pve_curvature',['-clobber']) if ($Clobber);
AddDefaultArgs('make_asp_grid',['-clobber']) if ($Clobber);
AddDefaultArgs('calibrate_white',['-clobber']) if ($Clobber);
AddDefaultArgs('minccalc',['-clobber']) if ($Clobber);
AddDefaultArgs('mincresample',['-clobber']) if ($Clobber);

# $input_volume should be a CLASSIFIED MINC volume
my $input_volume = shift;
my $t1_volume = shift;

# Masking surface and cortical-matter masked version of input.
# These are temporary files.
MNI::FileUtilities::check_output_path("${TmpDir}")
  or exit 1;

$masking_surface = "${TmpDir}input-mask.obj"
  unless defined $masking_surface;
$masked_input = "${TmpDir}input-masked.mnc"
  unless defined $masked_input;

# Output filename prefix
if ( !defined $output_prefix ) {
    my( $dir, $base, $ext ) = MNI::PathUtilities::split_path($input_volume);
    $output_prefix=$base;
}

# Generate mask image
my $Filled = "${TmpDir}/Filled.mnc";
$Mask_dilated = "${TmpDir}/dilated_mask.mnc";
if ( !defined $Mask ) {
    $Mask = "${TmpDir}/cortical_mask.mnc";
    Spawn(["mincdefrag", $input_volume, $Mask, "3", "6"] );
    Spawn(["mincdefrag", $Mask, $Mask, "2", "6"] );
    Spawn(["cortical_surface", $Mask, "${TmpDir}/${output_prefix}_cortex.obj", "1.5"]);
    Spawn(["minccalc", "-expression", 'out=1;', $input_volume, $Filled]);
    Spawn(["surface_mask2", "-binary_mask", $Filled, 
           "${TmpDir}/${output_prefix}_cortex.obj",
           "${TmpDir}/mask.mnc"]);
    Spawn(["mincresample", "-clobber", "-like", $input_volume, 
           "${TmpDir}/mask.mnc", $Mask]);
    Spawn(["rm", "-f", "${TmpDir}/mask.mnc"]);
    Spawn(["rm", "-f", $Filled]);
} elsif( !$vol_mask_flag ){
    $objMask = $Mask;
    $Mask = "${TmpDir}/cortical_mask.mnc";
    Spawn(["minccalc", "-expression", 'out=1;', $input_volume, $Filled]);
    Spawn(["surface_mask2", "-binary_mask", $Filled, $objMask, "${TmpDir}/mask.mnc"]);
    Spawn(["mincresample", "-clobber", "-like", $input_volume, "${TmpDir}/mask.mnc", $Mask]);
    Spawn(["rm", "-f", "${TmpDir}/mask.mnc"]);
    Spawn(["rm", "-f", $Filled]);
}

# Dilate the mask to make sure to include everything. Add 3 layers.

Spawn(["dilate_volume", $Mask, $Mask_dilated, "1", "26", "3"]);
Spawn(["minccalc", "-clobber", "-expression", 'if(A[1]>0){out=A[0];}else{out=0;}', $input_volume, 
       $Mask_dilated, "${TmpDir}/cls_masked.mnc"]);
$input_volume = "${TmpDir}/cls_masked.mnc";

#---------------------------------------------------------------------------
#  Step 1:   2 hours    Correcting a cls volume to classify putamen as WM
#                       Partial volume estimation
#---------------------------------------------------------------------------

# Partial volume estimation using pve2
$cls_correct = "${TmpDir}/cls_correct.mnc";
$skelCSF = "${TmpDir}skel_CSF.mnc";
Spawn(["pve_curvature", $t1_volume, $input_volume, $Mask_dilated, "${TmpDir}/curve"]);
Spawn(["pve_script", "-curve", "${TmpDir}/curve_cg.mnc", "-subcortical", $t1_volume, "${TmpDir}/pve", "-mask", $Mask_dilated, "-image", $input_volume]);
Spawn(["skel", "${TmpDir}/pve_csf.mnc", $skelCSF]);
Spawn(["discretize_pve", "${TmpDir}/pve_csf.mnc", "${TmpDir}/pve_wm.mnc", "${TmpDir}/pve_gm.mnc", "${TmpDir}/pve_sc.mnc", $cls_correct]);

#---------------------------------------------------------------------------
#  Get rid of hanging white/gray voxels that might have been added in the
#  region created by dilate_volume in the masking step. The dilation also
#  includes extra voxels in the region of the cerebellum. In the region of
#  the non-dilated mask, take the original classification without defrag.
#  Also apply same mask to pve files as well (add all to csf, ignore pve_sc).
#---------------------------------------------------------------------------

my $cls_frag = "${TmpDir}/cls_frag.mnc";
Spawn(["mincdefrag", $cls_correct, $cls_frag, "2", "6"] );
Spawn(["mincdefrag", $cls_frag, $cls_frag, "3", "6"] );

Spawn(["minccalc", "-expression",
       'if(A[3]>A[2] && A[0]>1.5 && A[1]<1.5){out=1;}else{out=0;}',
       "$cls_correct", $cls_frag, $Mask, $Mask_dilated,
       "${TmpDir}/reset_mask.mnc"] );

Spawn(["minccalc", "-expression", 'if(A[1]>0.5){out=0.0;}else{out=A[0];}',
      $cls_correct, "${TmpDir}/reset_mask.mnc", "${TmpDir}/reset_cls.mnc"] );
Spawn(["mv", "-f", "${TmpDir}/reset_cls.mnc", $cls_correct]);

Spawn(["minccalc", "-expression", 'if(A[1]>0.5){out=0.0;}else{out=A[0];}',
      "${TmpDir}/pve_wm.mnc", "${TmpDir}/reset_mask.mnc", "${TmpDir}/reset_wm.mnc"] );
Spawn(["mv", "-f", "${TmpDir}/reset_wm.mnc", "${TmpDir}/pve_wm.mnc"]);

Spawn(["minccalc", "-expression", 'if(A[1]>0.5){out=0.0;}else{out=A[0];}',
      "${TmpDir}/pve_gm.mnc", "${TmpDir}/reset_mask.mnc", "${TmpDir}/reset_gm.mnc"] );
Spawn(["mv", "-f", "${TmpDir}/reset_gm.mnc", "${TmpDir}/pve_gm.mnc"]);

Spawn(["minccalc", "-expression", 'if(A[1]>0.5){out=1.0;}else{out=A[0];}',
      "${TmpDir}/pve_csf.mnc", "${TmpDir}/reset_mask.mnc", "${TmpDir}/reset_csf.mnc"] );
Spawn(["mv", "-f", "${TmpDir}/reset_csf.mnc", "${TmpDir}/pve_csf.mnc"]);

Spawn(["rm", "-f", $cls_frag, $Mask_dilated, "${TmpDir}/reset_mask.mnc"]);

#---------------------------------------------------------------------------
# Generate cortical surface in the defined hemisphere
#---------------------------------------------------------------------------
$cls_correct_bak=$cls_correct;
$output_prefix_bak=$output_prefix;
$hemi_num_total=$hemi_left+$hemi_right;
for( my $hemi_num=0; $hemi_num < (1+$hemi_num_total); $hemi_num+=2 ){
  if( $hemi_left ){
    $hemi_left=0;
    $hemi_cls="${TmpDir}/cls_left.mnc";
    $hemi_rect_mask="${TmpDir}/hemi_rect_left_mask.mnc";
    Spawn(["make_phantom", "-rectangle", "-center", "-45", "0", "0", "-width", "90","300", "300", "-nelements", "181", "217", "181", "-step", "1", "1", "1", "-start", "-90", "-126", "-72", $hemi_rect_mask]);
    Spawn(["mincresample", "-like", $cls_correct_bak, $hemi_rect_mask, "${TmpDir}/left_tmp.mnc"]);
    Spawn(["mv", "-f", "${TmpDir}/left_tmp.mnc", $hemi_rect_mask]);    
    Spawn(["minccalc", "-expression", 'if(A[1]==0 && A[0]>=2.5){out=0;}else{out=A[0];}', $cls_correct_bak, $hemi_rect_mask, $hemi_cls]);
    $cls_correct = $hemi_cls;
    $output_prefix="${output_prefix_bak}_left";
  }
  elsif( $hemi_right ){
    $hemi_right=0;
    $hemi_cls="${TmpDir}/cls_right.mnc";
    $hemi_rect_mask="${TmpDir}/hemi_rect_right_mask.mnc";
    Spawn(["make_phantom", "-rectangle", "-center", "45", "0", "0", "-width", "90", "300", "300", "-nelements", "181", "217", "181", "-step", "1", "1", "1", "-start", "-90", "-126", "-72", $hemi_rect_mask]);
    Spawn(["mincresample", "-like", $cls_correct_bak, $hemi_rect_mask, "${TmpDir}/right_tmp.mnc"]);
    Spawn(["mv", "-f", "${TmpDir}/right_tmp.mnc", $hemi_rect_mask]);
    Spawn(["minccalc", "-expression", 'if(A[1]==0 && A[0]>=2.5){out=0;}else{out=A[0];}', $cls_correct_bak, $hemi_rect_mask, $hemi_cls]);
    $cls_correct = $hemi_cls;
    $output_prefix="${output_prefix_bak}_right";
  }

#---------------------------------------------------------------------------
#  Step 2:   2 minutes  Create a mask for the cortical white matter and 
#            the sub-cortical gray, to be used as the target to extract
#            the white matter surface.
#---------------------------------------------------------------------------

  Spawn( "mask_cortical_white_matter ${TmpDir}/pve $masked_input 3");

#---------------------------------------------------------------------------
#  Step 4:   20 hours   Shrink wrapping a sphere to the MASKED white matter
#                       matter,  (note that the second argument below is a
#                                 prefix)
#                       creating white_surface_{320,1280,5120,20480,81920}.obj
#                       you can delete the model files that are created:
#                            white_surface_m_{320,1280,5120,20480,81920}.obj
#---------------------------------------------------------------------------

# Deforms from model file `white_model_320.obj' using surface_fit
  Spawn("extract_white_surface  $masked_input  ${output_prefix}_white  2.5");

#---------------------------------------------------------------------------
#  Step 5:   x hours    Calibrate white_surface wite a gradient field
#---------------------------------------------------------------------------

  $white = "${output_prefix}_white_cal_81920.obj";
  Spawn(["calibrate_white", $t1_volume, $cls_correct, $skelCSF, "${output_prefix}_white_81920.obj", $white]);


#---------------------------------------------------------------------------
#  Step 6:   1 hour     Create a Laplacian field from the WM surface to the
#                       outer boundary of gray matter
#---------------------------------------------------------------------------

  $laplace = "${TmpDir}laplace.mnc";
  Spawn(["make_asp_grid", $skelCSF, $white, $cls_correct, $laplace]);


#---------------------------------------------------------------------------
#  Step 7:   20 hours   Expand a copy of the white surface out to the gray
#                       boundary.  Note that now we can delete the temporary
#                       masked white matter ($masked_input), and use the
#                       original classified volume for this step.
#---------------------------------------------------------------------------

  Spawn(["expand_from_white", $cls_correct, $white, "${output_prefix}_gray_81920.obj", $laplace]);

#---------------------------------------------------------------------------
#  Step 8:   5 minutes  Quality checks on the white and gray surfaces.
#---------------------------------------------------------------------------

Spawn(["surface_qc", $masked_input, $cls_correct, $white, "${output_prefix}_gray_81920.obj"]);

}
